{"version":3,"sources":["components/Footer/Footer.tsx","TodoContext.tsx","hooks/UseLocalStorege.ts","components/Header/Header.tsx","components/Section/Section.tsx","components/Error/Error.tsx","utils/fetchClient.ts","api/todos.ts","components/LoginPage/LoginPage.tsx","TodoApp.tsx","App.tsx","index.tsx"],"names":["Status","TodosContext","React","createContext","todos","setTodos","errorMessage","setErrorMessage","newTitle","setNewTitle","selectedId","setSelectedId","isEditing","setIsEditing","updatedTitle","setUpdatedTitle","isLoading","setIsLoading","user","setUser","useTodos","useContext","TodosProvider","children","useState","key","startValue","data","localStorage","getItem","JSON","parse","e","removeItem","value","setValue","newValue","setItem","stringify","useLocalStorage","useMemo","Provider","Footer","currentStatus","activeTodos","completedTodos","setStatus","onClearCompleted","handleClick","event","newStatus","currentTarget","textContent","className","data-cy","length","href","classNames","selected","ALL","onClick","ACTIVE","COMPLETED","type","disabled","Header","onSubmit","userId","isFocused","toggleAll","inputReference","useRef","amountCompletedTodo","filter","todo","completed","useEffect","current","focus","active","preventDefault","trim","id","title","ref","onChange","target","placeholder","Section","visibleTodos","onDelete","tempTodo","toggleStatus","handleSubmit","handleTitleChange","handleKeyUp","TransitionGroup","map","CSSTransition","timeout","checked","includes","onBlur","handleBlur","onKeyUp","onDoubleClick","handleDoubleClick","readOnly","Error","hidden","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","body","headers","then","fetch","response","ok","json","client","deleteTodo","updateTodo","LoginPage","userEmail","setUserEmail","userName","setUserName","userNotRegistred","setUserNotRegistred","name","username","email","phone","todoService","catch","finally","htmlFor","required","minLength","TodoApp","status","setTempTodo","getVisibleTodos","setIsFocused","idsOfCompletedTodos","clearError","promise","newTodo","activeTodo","updatingTodo","arrOfUpdatingIds","i","all","newTodos","updatedTodos","forEach","item","index","findIndex","splice","deleteWithEmptyTitle","allSettled","arrDeleted","push","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da31d013.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useTodos } from '../../TodoContext';\n\ntype Props = {\n  setStatus: (newStatus: Status) => void,\n  onClearCompleted: () => void;\n  currentStatus: Status,\n  activeTodos: Todo[],\n  completedTodos: Todo[],\n};\n\nexport enum Status {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n\nexport const Footer: React.FC<Props> = ({\n  currentStatus,\n  activeTodos,\n  completedTodos,\n  setStatus = () => { },\n  onClearCompleted = () => { },\n}) => {\n  const { isLoading } = useTodos();\n\n  const handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    const newStatus = event.currentTarget.textContent as Status;\n\n    setStatus(newStatus);\n  };\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"TodosCounter\">\n        {`${activeTodos.length} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          href=\"#/\"\n          className={classNames('filter__link', {\n            selected: currentStatus === Status.ALL,\n          })}\n          data-cy=\"FilterLinkAll\"\n          onClick={handleClick}\n        >\n          {Status.ALL}\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={classNames('filter__link', {\n            selected: currentStatus === Status.ACTIVE,\n          })}\n          data-cy=\"FilterLinkActive\"\n          onClick={handleClick}\n        >\n          {Status.ACTIVE}\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={classNames('filter__link', {\n            selected: currentStatus === Status.COMPLETED,\n          })}\n          data-cy=\"FilterLinkCompleted\"\n          onClick={handleClick}\n        >\n          {Status.COMPLETED}\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        data-cy=\"ClearCompletedButton\"\n        onClick={onClearCompleted}\n        disabled={!completedTodos.length && !isLoading}\n      >\n        Clear completed\n      </button>\n\n    </footer>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Todo } from './types/Todo';\nimport { useLocalStorage } from './hooks/UseLocalStorege';\nimport { User } from './types/User';\n\ninterface ITodosContext {\n  todos: Todo[],\n  setTodos: (newTodos: Todo[]) => void,\n  errorMessage: string,\n  setErrorMessage: (newMessage: string) => void,\n  newTitle: string,\n  setNewTitle: (newTitle: string) => void,\n  selectedId: number[] | null,\n  setSelectedId: (arrOfIds: number[] | null) => void,\n  isEditing: boolean,\n  setIsEditing: (status: boolean) => void,\n  updatedTitle: string,\n  setUpdatedTitle: (newTitle: string) => void,\n  isLoading: boolean,\n  setIsLoading: (status: boolean) => void,\n  user: User | null,\n  setUser: (user: User) => void,\n}\n\nexport const TodosContext = React.createContext<ITodosContext>({\n  todos: [],\n  setTodos: () => {},\n  errorMessage: '',\n  setErrorMessage: () => {},\n  newTitle: '',\n  setNewTitle: () => {},\n  selectedId: null,\n  setSelectedId: () => {},\n  isEditing: false,\n  setIsEditing: () => {},\n  updatedTitle: '',\n  setUpdatedTitle: () => {},\n  isLoading: false,\n  setIsLoading: () => {},\n  user: null,\n  setUser: () => {},\n});\n\nexport const useTodos = (): ITodosContext => React.useContext(TodosContext);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const TodosProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [newTitle, setNewTitle] = useState('');\n  const [selectedId, setSelectedId] = useState<number[] | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedTitle, setUpdatedTitle] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useLocalStorage<User | null>('user', null);\n\n  const value = useMemo(() => ({\n    todos,\n    setTodos,\n    errorMessage,\n    setErrorMessage,\n    newTitle,\n    setNewTitle,\n    selectedId,\n    setSelectedId,\n    isEditing,\n    setIsEditing,\n    updatedTitle,\n    setUpdatedTitle,\n    isLoading,\n    setIsLoading,\n    user,\n    setUser,\n  }), [\n    todos,\n    errorMessage,\n    newTitle,\n    selectedId,\n    isEditing,\n    updatedTitle,\n    isLoading,\n    user,\n  ]);\n\n  return (\n    <TodosContext.Provider value={value}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport\nfunction useLocalStorage<T>(key: string, startValue: T): [T, (v: T) => void] {\n  const [value, setValue] = useState(() => {\n    const data = localStorage.getItem(key);\n\n    if (data === null) {\n      return startValue;\n    }\n\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      localStorage.removeItem(key);\n\n      return startValue;\n    }\n  });\n\n  const save = (newValue: T) => {\n    localStorage.setItem(key, JSON.stringify(newValue));\n    setValue(newValue);\n  };\n\n  return [value, save];\n}\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useTodos } from '../../TodoContext';\n\ntype Props = {\n  onSubmit: (todo: Todo) => Promise<void>;\n  userId: number;\n  isFocused: boolean;\n  toggleAll: () => void;\n};\n\nexport const Header: React.FC<Props> = ({\n  onSubmit,\n  userId,\n  isFocused,\n  toggleAll = () => { },\n}) => {\n  const {\n    todos,\n    setErrorMessage,\n    newTitle,\n    setNewTitle,\n  } = useTodos();\n  // #region state\n  const inputReference = useRef<HTMLInputElement | null>(null);\n  const amountCompletedTodo = todos.filter(todo => todo.completed).length;\n\n  useEffect(() => {\n    if (inputReference.current && isFocused) {\n      inputReference.current.focus();\n    }\n  }, [isFocused]);\n  // #endregion\n\n  // #region handlers\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!newTitle.trim()) {\n      setErrorMessage('Title should not be empty');\n\n      return;\n    }\n\n    onSubmit({\n      id: 0, userId, title: newTitle.trim(), completed: false,\n    });\n  };\n  // #endregion\n\n  return (\n    <header className=\"todoapp__header\">\n      {todos.length > 0 && (\n        <button\n          onClick={() => toggleAll()}\n          type=\"button\"\n          className={classNames('todoapp__toggle-all', {\n            active: amountCompletedTodo === todos.length,\n          })}\n          data-cy=\"ToggleAllButton\"\n        />\n      )}\n\n      <form\n        onSubmit={handleSubmit}\n      >\n        <input\n          disabled={!isFocused}\n          ref={inputReference}\n          onChange={handleTitleChange}\n          value={newTitle}\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n","import classNames from 'classnames';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { useEffect, useRef } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useTodos } from '../../TodoContext';\n\ntype Props = {\n  visibleTodos: Todo[];\n  onDelete?: (id: number) => void;\n  tempTodo: Todo | null;\n  toggleStatus: (todo: Todo) => void;\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const Section: React.FC<Props> = ({\n  visibleTodos,\n  onDelete = () => { },\n  tempTodo,\n  toggleStatus = () => { },\n  onSubmit,\n}) => {\n  const {\n    selectedId,\n    setSelectedId,\n    isEditing,\n    setIsEditing,\n    updatedTitle,\n    setUpdatedTitle,\n    isLoading,\n  } = useTodos();\n\n  const inputReference = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (inputReference.current && isEditing) {\n      inputReference.current.focus();\n    }\n  }, [isEditing]);\n\n  const handleSubmit = (event: React.FormEvent, todo: Todo) => {\n    event.preventDefault();\n\n    if (todo.title === updatedTitle) {\n      setIsEditing(false);\n\n      return;\n    }\n\n    onSubmit(todo);\n  };\n\n  const handleBlur = (todo: Todo) => {\n    if (todo.title === updatedTitle) {\n      setIsEditing(false);\n\n      return;\n    }\n\n    onSubmit(todo);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUpdatedTitle(event.target.value);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditing(false);\n    }\n  };\n\n  let placeholder = '';\n\n  if (!updatedTitle) {\n    placeholder = 'Empty todo will be deleted';\n  }\n\n  const handleDoubleClick = (todo: Todo) => {\n    setIsEditing(true);\n    setSelectedId([todo.id]);\n    setUpdatedTitle(todo.title);\n  };\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      <TransitionGroup>\n        {visibleTodos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <div\n              data-cy=\"Todo\"\n              className={classNames('todo', {\n                completed: todo.completed,\n                active: !todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label className=\"todo__status-label\">\n                <input\n                  data-cy=\"TodoStatus\"\n                  type=\"checkbox\"\n                  className=\"todo__status\"\n                  checked={todo.completed}\n                  onChange={() => toggleStatus(todo)}\n                />\n              </label>\n\n              {isEditing && selectedId?.includes(todo.id)\n                ? (\n                  <form\n                    onSubmit={(event) => handleSubmit(event, todo)}\n                  >\n                    <input\n                      onBlur={() => handleBlur(todo)}\n                      ref={inputReference}\n                      onChange={handleTitleChange}\n                      value={updatedTitle}\n                      data-cy=\"TodoTitleField\"\n                      type=\"text\"\n                      className=\"todo__title-field\"\n                      placeholder={placeholder}\n                      onKeyUp={handleKeyUp}\n                    />\n                  </form>\n                ) : (\n                  <>\n                    <span\n                      data-cy=\"TodoTitle\"\n                      className=\"todo__title\"\n                      onDoubleClick={() => handleDoubleClick(todo)}\n                    >\n                      {todo.title}\n                    </span>\n                    <button\n                      type=\"button\"\n                      className=\"todo__remove\"\n                      data-cy=\"TodoDelete\"\n                      onClick={() => onDelete(todo.id)}\n                    >\n                      ×\n                    </button>\n                  </>\n                )}\n\n              <div\n                data-cy=\"TodoLoader\"\n                className={classNames('modal overlay', {\n                  'is-active': (selectedId?.includes(todo.id) && isLoading),\n                })}\n              >\n                <div className=\"modal-background has-background-white-ter\" />\n                <div className=\"loader\" />\n              </div>\n            </div>\n          </CSSTransition>\n        ))}\n        {tempTodo && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <div\n              data-cy=\"Todo\"\n              className={classNames('todo', {\n                completed: tempTodo.completed,\n                active: !tempTodo.completed,\n              })}\n              key={tempTodo.id}\n            >\n              <label className=\"todo__status-label\">\n                <input\n                  data-cy=\"TodoStatus\"\n                  type=\"checkbox\"\n                  className=\"todo__status\"\n                  checked={tempTodo.completed}\n                  readOnly\n                />\n              </label>\n\n              <span\n                data-cy=\"TodoTitle\"\n                className=\"todo__title\"\n              >\n                {tempTodo.title}\n              </span>\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n                data-cy=\"TodoDelete\"\n                onClick={() => onDelete(tempTodo.id)}\n              >\n                ×\n              </button>\n\n              <div\n                data-cy=\"TodoLoader\"\n                className={classNames('modal overlay', {\n                  'is-active': isLoading,\n                })}\n              >\n                <div className=\"modal-background has-background-white-ter\" />\n                <div className=\"loader\" />\n              </div>\n            </div>\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport classNames from 'classnames';\nimport { useTodos } from '../../TodoContext';\n\nexport const Error: React.FC = () => {\n  const { errorMessage, setErrorMessage } = useTodos();\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification is-danger is-light has-text-weight-normal', {\n          hidden: !errorMessage,\n        },\n      )}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => setErrorMessage('')}\n      />\n\n      {errorMessage}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = ({ userId, title, completed }: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', { userId, title, completed });\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const updateTodo = ({\n  id, userId, title, completed,\n}: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { userId, title, completed });\n};\n\nexport const getUser = (email: string) => {\n  return client.get<User[]>(`/users?email=${email}`);\n};\n\nexport const createUser = ({\n  name, username, email, phone,\n}: Omit<User, 'id'>) => {\n  return client.post<User>('/users', {\n    name, username, email, phone,\n  });\n};\n","import classNames from 'classnames';\nimport { useState } from 'react';\nimport { useTodos } from '../../TodoContext';\nimport { Error } from '../Error/Error';\nimport * as todoService from '../../api/todos';\n\nexport const LoginPage = () => {\n  const {\n    isLoading,\n    setUser,\n    setErrorMessage,\n    setIsLoading,\n  } = useTodos();\n  const [userEmail, setUserEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userNotRegistred, setUserNotRegistred] = useState(false);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserEmail(event.target.value);\n  };\n\n  const handleUserName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserName(event.target.value);\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    if (userNotRegistred) {\n      return todoService.createUser({\n        name: userName,\n        username: '',\n        email: userEmail,\n        phone: '',\n      })\n        .then((response) => {\n          setUser(response);\n          setUserNotRegistred(false);\n        })\n        .catch(() => setErrorMessage('Unable to load todos'))\n        .finally(() => setIsLoading(false));\n    }\n\n    return todoService.getUser(userEmail)\n      .then((response) => {\n        if (response[0]) {\n          setUser(response[0]);\n        } else {\n          setUserNotRegistred(true);\n        }\n      })\n      .catch(() => {\n        setErrorMessage('Unable to load todo');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <>\n      <form\n        className=\"box mt-5\"\n        onSubmit={handleSubmit}\n      >\n        <h1 className=\"title is-3\">\n          {userNotRegistred ? 'You need to register' : 'Log in to open todos'}\n        </h1>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-email\">Email</label>\n          <div className=\"control has-icons-left\">\n            <input\n              onChange={handleChange}\n              className=\"input\"\n              type=\"email\"\n              id=\"user-email\"\n              value={userEmail}\n              placeholder=\"Enter your email\"\n              required\n              disabled={userNotRegistred || isLoading}\n            />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n          </div>\n        </div>\n        {!userNotRegistred ? (\n          <div className=\"field\">\n            <button\n              type=\"submit\"\n              className={classNames('button is-primary', {\n                'is-loading': isLoading,\n              })}\n            >\n              Login\n            </button>\n          </div>\n        ) : (\n          <>\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"user-name\">Your Name</label>\n              <div className=\"control has-icons-left\">\n                <input\n                  type=\"text\"\n                  id=\"user-id\"\n                  className=\"input\"\n                  placeholder=\"Enter your name\"\n                  required\n                  minLength={4}\n                  value={userName}\n                  onChange={handleUserName}\n                  disabled={isLoading}\n                />\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-user\" />\n                </span>\n              </div>\n            </div>\n            <div className=\"field\">\n              <button\n                type=\"submit\"\n                className={classNames('button is-primary', {\n                  'is-loading': isLoading,\n                })}\n              >\n                Register\n              </button>\n            </div>\n          </>\n        )}\n      </form>\n\n      <Error />\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n// #region import\nimport React, { useEffect, useState } from 'react';\nimport { Footer, Status } from './components/Footer/Footer';\nimport { Header } from './components/Header/Header';\nimport { Section } from './components/Section/Section';\nimport { Error } from './components/Error/Error';\nimport { Todo } from './types/Todo';\nimport * as todoService from './api/todos';\nimport { useTodos } from './TodoContext';\nimport { LoginPage } from './components/LoginPage/LoginPage';\n// #endregion\n\nfunction getVisibleTodos(todos: Todo[], newStatus: Status) {\n  switch (newStatus) {\n    case Status.ACTIVE:\n      return todos.filter(todo => !todo.completed);\n\n    case Status.COMPLETED:\n      return todos.filter(todo => todo.completed);\n\n    default:\n      return todos;\n  }\n}\n\nexport const TodoApp: React.FC = () => {\n  // #region loadTodos\n  const {\n    todos,\n    setTodos,\n    errorMessage,\n    setErrorMessage,\n    setNewTitle,\n    setSelectedId,\n    setIsEditing,\n    updatedTitle,\n    setIsLoading,\n    isLoading,\n    user,\n  } = useTodos();\n\n  const [status, setStatus] = useState(Status.ALL);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const visibleTodos = getVisibleTodos(todos, status);\n  const [isFocused, setIsFocused] = useState(true);\n\n  const completedTodos = todos.filter(todo => todo.completed);\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const idsOfCompletedTodos = completedTodos.map(todo => todo.id);\n\n  const clearError = () => {\n    if (errorMessage) {\n      setTimeout(() => {\n        setErrorMessage('');\n      }, 3000);\n    }\n  };\n\n  useEffect(clearError, [errorMessage]);\n\n  function loadTodos() {\n    if (user) {\n      todoService.getTodos(user.id)\n        .then(response => {\n          setTodos(response);\n        })\n        .catch(() => {\n          setErrorMessage('Unable to load todos');\n        });\n    }\n  }\n\n  useEffect(loadTodos, [user]);\n  // #endregion\n\n  // #region add, delete, update\n  const addTodo = ({ userId, title, completed }: Todo) => {\n    setIsLoading(true);\n    setIsFocused(false);\n\n    const promise = todoService.createTodo({\n      userId, title: title.trim(), completed,\n    })\n      .then(newTodo => {\n        setTodos([...todos, newTodo]);\n        setNewTitle('');\n      })\n      .catch(() => {\n        setErrorMessage('Unable to add a todo');\n        clearError();\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setTempTodo(null);\n        setIsFocused(true);\n      });\n\n    if (user) {\n      setTempTodo({\n        id: 0, userId: user.id, title, completed,\n      });\n    }\n\n    return promise;\n  };\n\n  const deleteWithEmptyTitle = (id: number) => {\n    setIsLoading(true);\n    setSelectedId([id]);\n    setIsFocused(false);\n\n    const promise = todoService.deleteTodo(id)\n      .then(() => {\n        setTodos(todos.filter(todo => todo.id !== id));\n        setSelectedId(null);\n        setIsFocused(false);\n      })\n      .catch(() => {\n        setErrorMessage('Unable to delete a todo');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n\n    return promise;\n  };\n\n  const deleteTodo = (id: number) => {\n    setIsLoading(true);\n    setSelectedId([id]);\n    setIsFocused(false);\n\n    const promise = todoService.deleteTodo(id)\n      .then(() => {\n        setTodos(todos.filter(todo => todo.id !== id));\n      })\n      .catch(() => {\n        setErrorMessage('Unable to delete a todo');\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setSelectedId(null);\n        setIsFocused(true);\n      });\n\n    return promise;\n  };\n\n  const deleteCompleted = () => {\n    setIsLoading(true);\n    setIsFocused(false);\n    setSelectedId(idsOfCompletedTodos);\n\n    return Promise.allSettled(\n      idsOfCompletedTodos.map(id => todoService.deleteTodo(id)),\n    )\n      .then((response) => {\n        const arrDeleted: number[] = [];\n\n        idsOfCompletedTodos.forEach((id, index) => {\n          if (response[index].status === 'fulfilled') {\n            arrDeleted.push(id);\n          }\n\n          if (response[index].status === 'rejected') {\n            setErrorMessage('Unable to delete a todo');\n          }\n\n          const updatedTodos\n            = todos.filter(todo => !arrDeleted.includes(todo.id));\n\n          setTodos(updatedTodos);\n        });\n      })\n      .catch(() => {\n        setErrorMessage('Unable to delete a todo');\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setSelectedId(null);\n        setIsFocused(true);\n      });\n  };\n\n  const toggleStatus = (todo: Todo) => {\n    const {\n      id, userId, title, completed,\n    } = todo;\n\n    setSelectedId([id]);\n    setIsLoading(true);\n\n    return todoService.updateTodo({\n      id, userId, title, completed: !completed,\n    })\n      .then((newTodo) => {\n        const newTodos = [...todos];\n        const index = newTodos.findIndex(item => item.id === id);\n\n        newTodos.splice(index, 1, newTodo);\n        setTodos(newTodos);\n      })\n      .catch(() => {\n        setErrorMessage('Unable to update a todo');\n      })\n      .finally(() => {\n        setSelectedId(null);\n        setIsLoading(false);\n      });\n  };\n\n  const toggleAll = () => {\n    setIsLoading(true);\n    const activeTodo = todos.filter(todo => !todo.completed);\n\n    let updatingTodo = [...todos];\n\n    if (activeTodo.length > 0) {\n      updatingTodo = activeTodo;\n    }\n\n    const arrOfUpdatingIds = updatingTodo.map(i => i.id);\n\n    setSelectedId(arrOfUpdatingIds);\n\n    return Promise.all(\n      updatingTodo.map(todo => {\n        const {\n          id, userId, title, completed,\n        } = todo;\n\n        return todoService.updateTodo({\n          id, userId, title, completed: !completed,\n        });\n      }),\n    )\n      .then((newTodos) => {\n        const updatedTodos = [...todos];\n\n        newTodos.forEach(item => {\n          const index = updatedTodos.findIndex(i => i.id === item.id);\n\n          updatedTodos.splice(index, 1, item);\n        });\n\n        setTodos(updatedTodos);\n      })\n      .catch(() => {\n        setErrorMessage('Unable to update a todo');\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setSelectedId(null);\n      });\n  };\n\n  const updateTodo = (todo: Todo) => {\n    const {\n      id, userId, completed,\n    } = todo;\n\n    if (!updatedTitle.trim()) {\n      if (isLoading) {\n        return;\n      }\n\n      deleteWithEmptyTitle(id);\n\n      return;\n    }\n\n    setSelectedId([id]);\n    setIsLoading(true);\n\n    todoService.updateTodo({\n      id, userId, title: updatedTitle.trim(), completed,\n    })\n      .then((newTodo) => {\n        const newTodos = [...todos];\n        const index = newTodos.findIndex(item => item.id === id);\n\n        newTodos.splice(index, 1, newTodo);\n\n        setTodos(newTodos);\n        setSelectedId(null);\n        setIsEditing(false);\n      })\n      .catch(() => {\n        setIsLoading(false);\n        setErrorMessage('Unable to update a todo');\n        setIsLoading(false);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  // #endregion\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n\n        <Header\n          isFocused={isFocused}\n          userId={user.id}\n          onSubmit={addTodo}\n          toggleAll={toggleAll}\n        />\n\n        {visibleTodos && (\n          <Section\n            tempTodo={tempTodo}\n            visibleTodos={visibleTodos}\n            onDelete={deleteTodo}\n            toggleStatus={toggleStatus}\n            onSubmit={updateTodo}\n          />\n        )}\n\n        {(todos.length > 0 || tempTodo) && (\n          <Footer\n            setStatus={setStatus}\n            currentStatus={status}\n            onClearCompleted={deleteCompleted}\n            completedTodos={completedTodos}\n            activeTodos={activeTodos}\n          />\n        )}\n\n      </div>\n\n      <Error />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './TodoApp';\nimport { TodosProvider } from './TodoContext';\n\nexport const App: React.FC = () => {\n  return (\n    <TodosProvider>\n      <TodoApp />\n    </TodosProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}